import { DataType, DataTypes, Model, ModelStatic } from "sequelize";
import {
  ModelInfo,
  ModelInfos,
  OrmHelper,
  associationInfo,
} from "../types/main";

declare module "sequelize" {
  export interface ModelAttributeColumnOptions {
    _autoGenerated?: boolean;
  }
}

export class SequelizeHelper implements OrmHelper {
  constructor() {}

  extractModelInfo(): ModelInfos[] {
    return Object.entries(dbInstance.models).map(
      ([tableName, model]): ModelInfos => {
        /* associations means to which other models refrences this model */
        const associations = Object.entries(model.associations)
          .map(([model, options]): associationInfo | undefined => {
            const associationType = this.getAssociationType(
              options.associationType
            );
            if (associationType) {
              return {
                model: options.target.tableName,
                associationType,
              };
            }
          })
          .filter((i) => i);
        return {
          tableName: tableName,
          fields: this.getModelFieldInfo(model),
          associations: associations,
        };
      }
    );
  }

  async getAll(modelName: string): Promise<{ [key: string]: any }> {
    const model = dbInstance.models[modelName];
    if (!model) throw new Error("invalid model name");
    return model.findAll();
  }

  getModelFieldInfo(model: ModelStatic<Model>): ModelInfo[] {
    const modelAttributes = model.getAttributes();

    return Object.entries(modelAttributes)
      .map(([fieldName, fieldProperties]): ModelInfo | undefined => {
        if (fieldProperties.autoIncrement || fieldProperties._autoGenerated)
          return;
        return {
          type: this.getType(fieldProperties.type),
          fieldName: fieldName,
          allowNull: fieldProperties.allowNull,
          defaultValue: fieldProperties.defaultValue as string,
          relationWith: fieldProperties.references,
        };
      })
      .filter((i): i is ModelInfo => i !== undefined);
  }

  getType(typeInstance: DataType) {
    if (typeInstance instanceof DataTypes.BOOLEAN) return "boolean";
    if (typeInstance instanceof DataTypes.TEXT) return "text";
    if (typeInstance instanceof DataTypes.INTEGER) return "number";
    if (typeInstance instanceof DataTypes.DATE) return "date";
    if (typeInstance instanceof DataTypes.STRING) return "string";
  }

  getAssociationType(associationName: string) {
    if (associationName === "HasOne") return "oneToOne";
    if (associationName === "HasMany") return "oneToMany";
  }
}
